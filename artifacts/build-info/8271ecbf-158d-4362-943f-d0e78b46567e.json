{
  "id": "8271ecbf-158d-4362-943f-d0e78b46567e",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.4",
  "solcLongVersion": "0.7.4+commit.3f05b770",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/SafeCast.sol": {
        "content": "// // SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n\r\n// /**\r\n//  * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n//  * checks.\r\n//  *\r\n//  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n//  * easily result in undesired exploitation or bugs, since developers usually\r\n//  * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n//  * reverting the transaction when such an operation overflows.\r\n//  *\r\n//  * Using this library instead of the unchecked operations eliminates an entire\r\n//  * class of bugs, so it's recommended to use it always.\r\n//  *\r\n//  * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n//  * all math on `uint256` and `int256` and then downcasting.\r\n//  */\r\n// library SafeCast {\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted uint128 from uint256, reverting on\r\n//      * overflow (when the input is greater than largest uint128).\r\n//      *\r\n//      * Counterpart to Solidity's `uint128` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 128 bits\r\n//      */\r\n//     function toUint128(uint256 value) internal pure returns (uint128) {\r\n//         require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n//         return uint128(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted uint64 from uint256, reverting on\r\n//      * overflow (when the input is greater than largest uint64).\r\n//      *\r\n//      * Counterpart to Solidity's `uint64` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 64 bits\r\n//      */\r\n//     function toUint64(uint256 value) internal pure returns (uint64) {\r\n//         require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n//         return uint64(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted uint32 from uint256, reverting on\r\n//      * overflow (when the input is greater than largest uint32).\r\n//      *\r\n//      * Counterpart to Solidity's `uint32` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 32 bits\r\n//      */\r\n//     function toUint32(uint256 value) internal pure returns (uint32) {\r\n//         require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n//         return uint32(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted uint16 from uint256, reverting on\r\n//      * overflow (when the input is greater than largest uint16).\r\n//      *\r\n//      * Counterpart to Solidity's `uint16` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 16 bits\r\n//      */\r\n//     function toUint16(uint256 value) internal pure returns (uint16) {\r\n//         require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n//         return uint16(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted uint8 from uint256, reverting on\r\n//      * overflow (when the input is greater than largest uint8).\r\n//      *\r\n//      * Counterpart to Solidity's `uint8` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 8 bits.\r\n//      */\r\n//     function toUint8(uint256 value) internal pure returns (uint8) {\r\n//         require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n//         return uint8(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Converts a signed int256 into an unsigned uint256.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must be greater than or equal to 0.\r\n//      */\r\n//     function toUint256(int256 value) internal pure returns (uint256) {\r\n//         require(value >= 0, \"SafeCast: value must be positive\");\r\n//         return uint256(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted int128 from int256, reverting on\r\n//      * overflow (when the input is less than smallest int128 or\r\n//      * greater than largest int128).\r\n//      *\r\n//      * Counterpart to Solidity's `int128` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 128 bits\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function toInt128(int256 value) internal pure returns (int128) {\r\n//         require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n//         return int128(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted int64 from int256, reverting on\r\n//      * overflow (when the input is less than smallest int64 or\r\n//      * greater than largest int64).\r\n//      *\r\n//      * Counterpart to Solidity's `int64` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 64 bits\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function toInt64(int256 value) internal pure returns (int64) {\r\n//         require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n//         return int64(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted int32 from int256, reverting on\r\n//      * overflow (when the input is less than smallest int32 or\r\n//      * greater than largest int32).\r\n//      *\r\n//      * Counterpart to Solidity's `int32` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 32 bits\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function toInt32(int256 value) internal pure returns (int32) {\r\n//         require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n//         return int32(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted int16 from int256, reverting on\r\n//      * overflow (when the input is less than smallest int16 or\r\n//      * greater than largest int16).\r\n//      *\r\n//      * Counterpart to Solidity's `int16` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 16 bits\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function toInt16(int256 value) internal pure returns (int16) {\r\n//         require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n//         return int16(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the downcasted int8 from int256, reverting on\r\n//      * overflow (when the input is less than smallest int8 or\r\n//      * greater than largest int8).\r\n//      *\r\n//      * Counterpart to Solidity's `int8` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must fit into 8 bits.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function toInt8(int256 value) internal pure returns (int8) {\r\n//         require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n//         return int8(value);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Converts an unsigned uint256 into a signed int256.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - input must be less than or equal to maxInt256.\r\n//      */\r\n//     function toInt256(uint256 value) internal pure returns (int256) {\r\n//         require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n//         return int256(value);\r\n//     }\r\n// }\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/SafeCast.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/SafeCast.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/SafeCast.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/SafeCast.sol",
          "exportedSymbols": {},
          "id": 1,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "7334:0:0"
        },
        "id": 0
      }
    }
  }
}
