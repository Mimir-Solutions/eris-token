{
  "id": "c44a52e2-1068-415c-88a3-86a5594fc919",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.4",
  "solcLongVersion": "0.7.4+commit.3f05b770",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/collections/UInt256Set.sol": {
        "content": "// // SPDX-License-Identifier: AGPL-3.0-or-later\r\n// pragma solidity 0.7.4;\r\n\r\n// import \"./EnumerableSet.sol\";\r\n\r\n// library UInt256Set {\r\n    \r\n//     using EnumerbaleSet for EnumerabletSet.Set;\r\n\r\n//     struct UInt256Set {\r\n//         Set _inner;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Add a value to a set. O(1).\r\n//      *\r\n//      * Returns true if the value was added to the set, that is if it was not\r\n//      * already present.\r\n//      */\r\n//     function add(UInt256Set storage set, uint256 value) internal returns (bool) {\r\n//         return _add(set._inner, bytes32(value));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Removes a value from a set. O(1).\r\n//      *\r\n//      * Returns true if the value was removed from the set, that is if it was\r\n//      * present.\r\n//      */\r\n//     function remove(UInt256Set storage set, uint256 value) internal returns (bool) {\r\n//         return _remove(set._inner, bytes32(value));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns true if the value is in the set. O(1).\r\n//      */\r\n//     function contains(UInt256Set storage set, uint256 value) internal view returns (bool) {\r\n//         return _contains(set._inner, bytes32(value));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the number of values on the set. O(1).\r\n//      */\r\n//     function length(UInt256Set storage set) internal view returns (uint256) {\r\n//         return _length(set._inner);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the value stored at position `index` in the set. O(1).\r\n//      *\r\n//      * Note that there are no guarantees on the ordering of values inside the\r\n//      * array, and it may change when more values are added or removed.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `index` must be strictly less than {length}.\r\n//      */\r\n//     function at(UInt256Set storage set, uint256 index) internal view returns (uint256) {\r\n//         return uint256(_at(set._inner, index));\r\n//     }\r\n// }"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/collections/UInt256Set.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/collections/UInt256Set.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/collections/UInt256Set.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/collections/UInt256Set.sol",
          "exportedSymbols": {},
          "id": 1,
          "license": "AGPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "1955:0:0"
        },
        "id": 0
      }
    }
  }
}
