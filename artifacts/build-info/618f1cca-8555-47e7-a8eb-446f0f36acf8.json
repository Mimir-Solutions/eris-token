{
  "id": "618f1cca-8555-47e7-a8eb-446f0f36acf8",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.4",
  "solcLongVersion": "0.7.4+commit.3f05b770",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/String.sol": {
        "content": "// // SPDX-License-Identifier: AGPL-3.0-or-later\r\n// pragma solidity 0.7.4;\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n// import \"../../utils/math/SafeMath.sol\";\r\n\r\n// /**\r\n//  * @dev String operations.\r\n//  */\r\n// library String {\r\n\r\n//     using SafeMath for uint256;\r\n    \r\n//     /**\r\n//      * @dev Converts a `uint256` to its ASCII `string` representation.\r\n//      */\r\n//     function toString(uint256 value) internal pure returns (string memory) {\r\n//         // Inspired by OraclizeAPI's implementation - MIT licence\r\n//         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n//         if (value == 0) {\r\n//             return \"0\";\r\n//         }\r\n//         uint256 temp = value;\r\n//         uint256 digits;\r\n//         while (temp != 0) {\r\n//             digits++;\r\n//             temp /= 10;\r\n//         }\r\n//         bytes memory buffer = new bytes(digits);\r\n//         uint256 index = digits - 1;\r\n//         temp = value;\r\n//         while (temp != 0) {\r\n//             buffer[index--] = byte(uint8(48 + temp % 10));\r\n//             temp /= 10;\r\n//         }\r\n//         return string(buffer);\r\n//     }\r\n\r\n//     function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r\n//         uint8 i = 0;\r\n//         while(i < 32 && _bytes32[i] != 0) {\r\n//             i++;\r\n//         }\r\n//         bytes memory bytesArray = new bytes(i);\r\n//         for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r\n//             bytesArray[i] = _bytes32[i];\r\n//         }\r\n//         return string(bytesArray);\r\n//     }\r\n// }\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/String.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/String.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/String.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/String.sol",
          "exportedSymbols": {},
          "id": 1,
          "license": "AGPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "1609:0:0"
        },
        "id": 0
      }
    }
  }
}
