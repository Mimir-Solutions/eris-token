{
  "id": "1e1a101a-4d73-45d3-aff3-a4e1c7fe9c6c",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.4",
  "solcLongVersion": "0.7.4+commit.3f05b770",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/Address.sol": {
        "content": "// // SPDX-License-Identifier: AGPL-3.0-or-later\r\n// pragma solidity 0.7.4;\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n// /**\r\n//  * @dev Collection of functions related to the address type\r\n//  */\r\n// library Address {\r\n//     /**\r\n//      * @dev Returns true if `account` is a contract.\r\n//      *\r\n//      * [IMPORTANT]\r\n//      * ====\r\n//      * It is unsafe to assume that an address for which this function returns\r\n//      * false is an externally-owned account (EOA) and not a contract.\r\n//      *\r\n//      * Among others, `isContract` will return false for the following\r\n//      * types of addresses:\r\n//      *\r\n//      *  - an externally-owned account\r\n//      *  - a contract in construction\r\n//      *  - an address where a contract will be created\r\n//      *  - an address where a contract lived, but was destroyed\r\n//      * ====\r\n//      */\r\n//     function isContract(address account) internal view returns (bool) {\r\n//         // This method relies in extcodesize, which returns 0 for contracts in\r\n//         // construction, since the code is only stored at the end of the\r\n//         // constructor execution.\r\n\r\n//         uint256 size;\r\n//         // solhint-disable-next-line no-inline-assembly\r\n//         assembly { size := extcodesize(account) }\r\n//         return size > 0;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n//      * `recipient`, forwarding all available gas and reverting on errors.\r\n//      *\r\n//      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n//      * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n//      * imposed by `transfer`, making them unable to receive funds via\r\n//      * `transfer`. {sendValue} removes this limitation.\r\n//      *\r\n//      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n//      *\r\n//      * IMPORTANT: because control is transferred to `recipient`, care must be\r\n//      * taken to not create reentrancy vulnerabilities. Consider using\r\n//      * {ReentrancyGuard} or the\r\n//      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n//      */\r\n//     function sendValue(address payable recipient, uint256 amount) internal {\r\n//         require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n//         (bool success, ) = recipient.call{ value: amount }(\"\");\r\n//         require(success, \"Address: unable to send value, recipient may have reverted\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Performs a Solidity function call using a low level `call`. A\r\n//      * plain`call` is an unsafe replacement for a function call: use this\r\n//      * function instead.\r\n//      *\r\n//      * If `target` reverts with a revert reason, it is bubbled up by this\r\n//      * function (like regular Solidity function calls).\r\n//      *\r\n//      * Returns the raw returned data. To convert to the expected return value,\r\n//      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `target` must be a contract.\r\n//      * - calling `target` with `data` must not revert.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n//       return functionCall(target, data, \"Address: low-level call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n//      * `errorMessage` as a fallback revert reason when `target` reverts.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n//         return _functionCallWithValue(target, data, 0, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but also transferring `value` wei to `target`.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - the calling contract must have an ETH balance of at least `value`.\r\n//      * - the called Solidity function must be `payable`.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n//         return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n//      * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n//         require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n//         return _functionCallWithValue(target, data, value, errorMessage);\r\n//     }\r\n\r\n//     function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n//         require(isContract(target), \"Address: call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n//         if (success) {\r\n//             return returndata;\r\n//         } else {\r\n//             // Look for revert reason and bubble it up if present\r\n//             if (returndata.length > 0) {\r\n//                 // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n//                 // solhint-disable-next-line no-inline-assembly\r\n//                 assembly {\r\n//                     let returndata_size := mload(returndata)\r\n//                     revert(add(32, returndata), returndata_size)\r\n//                 }\r\n//             } else {\r\n//                 revert(errorMessage);\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/Address.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/Address.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/Address.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/datatypes/primitives/Address.sol",
          "exportedSymbols": {},
          "id": 1,
          "license": "AGPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "6456:0:0"
        },
        "id": 0
      }
    }
  }
}
