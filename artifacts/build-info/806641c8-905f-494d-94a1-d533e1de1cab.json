{
  "id": "806641c8-905f-494d-94a1-d533e1de1cab",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.4",
  "solcLongVersion": "0.7.4+commit.3f05b770",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/interfaces/IDateTime.sol": {
        "content": "// /** \r\n//  * Currenlty deployed at\r\n//  * Mainnet: at0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce\r\n//  * Rinkerby: 0x92482Ba45A4D2186DafB486b322C6d0B88410FE7\r\n// */\r\n// // TODO needs to be trimmed down and reimplemented into an interface.\r\n// pragma solidity 0.7.4;\r\n\r\n// interface IDateTime {\r\n\r\n//         function isLeapYear(uint16 year) public pure returns (bool);\r\n\r\n//         function leapYearsBefore(uint year) public pure returns (uint);\r\n\r\n//         function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\r\n//                 if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12);\r\n\r\n//         function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt);\r\n\r\n//         function getYear(uint timestamp) public pure returns (uint16);\r\n\r\n//         function getMonth(uint timestamp) public pure returns (uint8);\r\n\r\n//         function getDay(uint timestamp) public pure returns (uint8);\r\n\r\n//         function getHour(uint timestamp) public pure returns (uint8);\r\n\r\n//         function getMinute(uint timestamp) public pure returns (uint8);\r\n\r\n//         function getSecond(uint timestamp) public pure returns (uint8);\r\n\r\n//         function getWeekday(uint timestamp) public pure returns (uint8);\r\n\r\n//         function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp);\r\n\r\n//         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp);\r\n\r\n//         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp);\r\n\r\n//         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp);\r\n// }"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "1878",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/interfaces/IDateTime.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/interfaces/IDateTime.sol",
          "start": -1
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/interfaces/IDateTime.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/interfaces/IDateTime.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/interfaces/IDateTime.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/interfaces/IDateTime.sol",
          "exportedSymbols": {},
          "id": 1,
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "1819:0:0"
        },
        "id": 0
      }
    }
  }
}
