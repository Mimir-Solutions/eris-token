{
  "id": "76904a01-e99a-4680-bbd5-2dbdb13180b3",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.4",
  "solcLongVersion": "0.7.4+commit.3f05b770",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/SafeDateTime.sol": {
        "content": "// /** \r\n//  * Currenlty deployed at\r\n//  * Mainnet: at0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce\r\n//  * Rinkerby: 0x92482Ba45A4D2186DafB486b322C6d0B88410FE7\r\n// */\r\n// // TODO Update to latest Solidity compiler.\r\n// // TODO Update to use SafeMath version of new intelligent primitives auto-boxers.\r\n// // Might need to be redeployed on mainnet if update is significant.\r\n// pragma solidity ^0.4.16;\r\n\r\n// contract SafeDateTime {\r\n//         /*\r\n//          *  Date and Time utilities for ethereum contracts\r\n//          *\r\n//          */\r\n//         struct _DateTime {\r\n//                 uint16 year;\r\n//                 uint8 month;\r\n//                 uint8 day;\r\n//                 uint8 hour;\r\n//                 uint8 minute;\r\n//                 uint8 second;\r\n//                 uint8 weekday;\r\n//         }\r\n\r\n//         uint constant DAY_IN_SECONDS = 86400;\r\n//         uint constant YEAR_IN_SECONDS = 31536000;\r\n//         uint constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n//         uint constant HOUR_IN_SECONDS = 3600;\r\n//         uint constant MINUTE_IN_SECONDS = 60;\r\n\r\n//         uint16 constant ORIGIN_YEAR = 1970;\r\n\r\n//         function isLeapYear(uint16 year) public pure returns (bool) {\r\n//                 if (year % 4 != 0) {\r\n//                         return false;\r\n//                 }\r\n//                 if (year % 100 != 0) {\r\n//                         return true;\r\n//                 }\r\n//                 if (year % 400 != 0) {\r\n//                         return false;\r\n//                 }\r\n//                 return true;\r\n//         }\r\n\r\n//         function leapYearsBefore(uint year) public pure returns (uint) {\r\n//                 year -= 1;\r\n//                 return year / 4 - year / 100 + year / 400;\r\n//         }\r\n\r\n//         function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\r\n//                 if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n//                         return 31;\r\n//                 }\r\n//                 else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n//                         return 30;\r\n//                 }\r\n//                 else if (isLeapYear(year)) {\r\n//                         return 29;\r\n//                 }\r\n//                 else {\r\n//                         return 28;\r\n//                 }\r\n//         }\r\n\r\n//         function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\r\n//                 uint secondsAccountedFor = 0;\r\n//                 uint buf;\r\n//                 uint8 i;\r\n\r\n//                 // Year\r\n//                 dt.year = getYear(timestamp);\r\n//                 buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n//                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n//                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\r\n\r\n//                 // Month\r\n//                 uint secondsInMonth;\r\n//                 for (i = 1; i <= 12; i++) {\r\n//                         secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\r\n//                         if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n//                                 dt.month = i;\r\n//                                 break;\r\n//                         }\r\n//                         secondsAccountedFor += secondsInMonth;\r\n//                 }\r\n\r\n//                 // Day\r\n//                 for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\r\n//                         if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\r\n//                                 dt.day = i;\r\n//                                 break;\r\n//                         }\r\n//                         secondsAccountedFor += DAY_IN_SECONDS;\r\n//                 }\r\n\r\n//                 // Hour\r\n//                 dt.hour = getHour(timestamp);\r\n\r\n//                 // Minute\r\n//                 dt.minute = getMinute(timestamp);\r\n\r\n//                 // Second\r\n//                 dt.second = getSecond(timestamp);\r\n\r\n//                 // Day of week.\r\n//                 dt.weekday = getWeekday(timestamp);\r\n//         }\r\n\r\n//         function getYear(uint timestamp) public pure returns (uint16) {\r\n//                 uint secondsAccountedFor = 0;\r\n//                 uint16 year;\r\n//                 uint numLeapYears;\r\n\r\n//                 // Year\r\n//                 year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n//                 numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n//                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n//                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n//                 while (secondsAccountedFor > timestamp) {\r\n//                         if (isLeapYear(uint16(year - 1))) {\r\n//                                 secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n//                         }\r\n//                         else {\r\n//                                 secondsAccountedFor -= YEAR_IN_SECONDS;\r\n//                         }\r\n//                         year -= 1;\r\n//                 }\r\n//                 return year;\r\n//         }\r\n\r\n//         function getMonth(uint timestamp) public pure returns (uint8) {\r\n//                 return parseTimestamp(timestamp).month;\r\n//         }\r\n\r\n//         function getDay(uint timestamp) public pure returns (uint8) {\r\n//                 return parseTimestamp(timestamp).day;\r\n//         }\r\n\r\n//         function getHour(uint timestamp) public pure returns (uint8) {\r\n//                 return uint8((timestamp / 60 / 60) % 24);\r\n//         }\r\n\r\n//         function getMinute(uint timestamp) public pure returns (uint8) {\r\n//                 return uint8((timestamp / 60) % 60);\r\n//         }\r\n\r\n//         function getSecond(uint timestamp) public pure returns (uint8) {\r\n//                 return uint8(timestamp % 60);\r\n//         }\r\n\r\n//         function getWeekday(uint timestamp) public pure returns (uint8) {\r\n//                 return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\r\n//         }\r\n\r\n//         function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\r\n//                 return toTimestamp(year, month, day, 0, 0, 0);\r\n//         }\r\n\r\n//         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\r\n//                 return toTimestamp(year, month, day, hour, 0, 0);\r\n//         }\r\n\r\n//         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\r\n//                 return toTimestamp(year, month, day, hour, minute, 0);\r\n//         }\r\n\r\n//         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\r\n//                 uint16 i;\r\n\r\n//                 // Year\r\n//                 for (i = ORIGIN_YEAR; i < year; i++) {\r\n//                         if (isLeapYear(i)) {\r\n//                                 timestamp += LEAP_YEAR_IN_SECONDS;\r\n//                         }\r\n//                         else {\r\n//                                 timestamp += YEAR_IN_SECONDS;\r\n//                         }\r\n//                 }\r\n\r\n//                 // Month\r\n//                 uint8[12] memory monthDayCounts;\r\n//                 monthDayCounts[0] = 31;\r\n//                 if (isLeapYear(year)) {\r\n//                         monthDayCounts[1] = 29;\r\n//                 }\r\n//                 else {\r\n//                         monthDayCounts[1] = 28;\r\n//                 }\r\n//                 monthDayCounts[2] = 31;\r\n//                 monthDayCounts[3] = 30;\r\n//                 monthDayCounts[4] = 31;\r\n//                 monthDayCounts[5] = 30;\r\n//                 monthDayCounts[6] = 31;\r\n//                 monthDayCounts[7] = 31;\r\n//                 monthDayCounts[8] = 30;\r\n//                 monthDayCounts[9] = 31;\r\n//                 monthDayCounts[10] = 30;\r\n//                 monthDayCounts[11] = 31;\r\n\r\n//                 for (i = 1; i < month; i++) {\r\n//                         timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\r\n//                 }\r\n\r\n//                 // Day\r\n//                 timestamp += DAY_IN_SECONDS * (day - 1);\r\n\r\n//                 // Hour\r\n//                 timestamp += HOUR_IN_SECONDS * (hour);\r\n\r\n//                 // Minute\r\n//                 timestamp += MINUTE_IN_SECONDS * (minute);\r\n\r\n//                 // Second\r\n//                 timestamp += second;\r\n\r\n//                 return timestamp;\r\n//         }\r\n// }"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "1878",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/SafeDateTime.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/SafeDateTime.sol",
          "start": -1
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/SafeDateTime.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/SafeDateTime.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/SafeDateTime.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/holyzeppelin/contracts/wip/libraries/utils/time/SafeDateTime.sol",
          "exportedSymbols": {},
          "id": 1,
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "8722:0:0"
        },
        "id": 0
      }
    }
  }
}
