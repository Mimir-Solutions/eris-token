{
  "id": "cb0eea30-7f5b-4ac0-801c-fa9691026e3b",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.4",
  "solcLongVersion": "0.7.4+commit.3f05b770",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Router01.sol": {
        "content": "// // SPDX-License-Identifier: AGPL-3.0-or-later\r\n// pragma solidity 0.7.4;\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n// interface IUniswapV2Router01 {\r\n//     function factory() external view returns (address);\r\n//     function WETH() external view returns (address);\r\n\r\n//     function addLiquidity(\r\n//         address tokenA,\r\n//         address tokenB,\r\n//         uint amountADesired,\r\n//         uint amountBDesired,\r\n//         uint amountAMin,\r\n//         uint amountBMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n//     function addLiquidityETH(\r\n//         address token,\r\n//         uint amountTokenDesired,\r\n//         uint amountTokenMin,\r\n//         uint amountETHMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n//     function removeLiquidity(\r\n//         address tokenA,\r\n//         address tokenB,\r\n//         uint liquidity,\r\n//         uint amountAMin,\r\n//         uint amountBMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint amountA, uint amountB);\r\n\r\n//     function removeLiquidityETH(\r\n//         address token,\r\n//         uint liquidity,\r\n//         uint amountTokenMin,\r\n//         uint amountETHMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint amountToken, uint amountETH);\r\n\r\n//     function removeLiquidityWithPermit(\r\n//         address tokenA,\r\n//         address tokenB,\r\n//         uint liquidity,\r\n//         uint amountAMin,\r\n//         uint amountBMin,\r\n//         address to,\r\n//         uint deadline,\r\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n//     ) external returns (uint amountA, uint amountB);\r\n\r\n//     function removeLiquidityETHWithPermit(\r\n//         address token,\r\n//         uint liquidity,\r\n//         uint amountTokenMin,\r\n//         uint amountETHMin,\r\n//         address to,\r\n//         uint deadline,\r\n//         bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n//     ) external returns (uint amountToken, uint amountETH);\r\n\r\n//     function swapExactTokensForTokens(\r\n//         uint amountIn,\r\n//         uint amountOutMin,\r\n//         address[] calldata path,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint[] memory amounts);\r\n\r\n//     function swapTokensForExactTokens(\r\n//         uint amountOut,\r\n//         uint amountInMax,\r\n//         address[] calldata path,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint[] memory amounts);\r\n\r\n//     function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n//         external\r\n//         payable\r\n//         returns (uint[] memory amounts);\r\n\r\n//     function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n//         external\r\n//         returns (uint[] memory amounts);\r\n\r\n//     function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n//         external\r\n//         returns (uint[] memory amounts);\r\n\r\n//     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n//         external\r\n//         payable\r\n//         returns (uint[] memory amounts);\r\n\r\n//     function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n//     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n//     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n//     function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n//     function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n// }"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Router01.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Router01.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Router01.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Router01.sol",
          "exportedSymbols": {},
          "id": 1,
          "license": "AGPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "4001:0:0"
        },
        "id": 0
      }
    }
  }
}
