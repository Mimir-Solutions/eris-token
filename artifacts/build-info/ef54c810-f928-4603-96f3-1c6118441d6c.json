{
  "id": "ef54c810-f928-4603-96f3-1c6118441d6c",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.4",
  "solcLongVersion": "0.7.4+commit.3f05b770",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Pair.sol": {
        "content": "// // SPDX-License-Identifier: AGPL-3.0-or-later\r\n// pragma solidity 0.7.4;\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n// interface IUniswapV2Pair {\r\n//     event Approval(address indexed owner, address indexed spender, uint value);\r\n//     event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n//     function name() external pure returns (string memory);\r\n//     function symbol() external pure returns (string memory);\r\n//     function decimals() external pure returns (uint8);\r\n//     function totalSupply() external view returns (uint);\r\n//     function balanceOf(address owner) external view returns (uint);\r\n//     function allowance(address owner, address spender) external view returns (uint);\r\n\r\n//     function approve(address spender, uint value) external returns (bool);\r\n//     function transfer(address to, uint value) external returns (bool);\r\n//     function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n//     function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n//     function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n//     function nonces(address owner) external view returns (uint);\r\n\r\n//     function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n//     event Mint(address indexed sender, uint amount0, uint amount1);\r\n//     event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n//     event Swap(\r\n//         address indexed sender,\r\n//         uint amount0In,\r\n//         uint amount1In,\r\n//         uint amount0Out,\r\n//         uint amount1Out,\r\n//         address indexed to\r\n//     );\r\n//     event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n//     function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n//     function factory() external view returns (address);\r\n//     function token0() external view returns (address);\r\n//     function token1() external view returns (address);\r\n//     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n//     function price0CumulativeLast() external view returns (uint);\r\n//     function price1CumulativeLast() external view returns (uint);\r\n//     function kLast() external view returns (uint);\r\n\r\n//     function mint(address to) external returns (uint liquidity);\r\n//     function burn(address to) external returns (uint amount0, uint amount1);\r\n//     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n//     function skim(address to) external;\r\n//     function sync() external;\r\n\r\n//     function initialize(address, address) external;\r\n// }"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Pair.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.4;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Pair.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Pair.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/holyzeppelin/contracts/wip/interfaces/uniswapV2/IUniswapV2Pair.sol",
          "exportedSymbols": {},
          "id": 1,
          "license": "AGPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "2687:0:0"
        },
        "id": 0
      }
    }
  }
}
